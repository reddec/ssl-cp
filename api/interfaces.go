// Code generated by simple-swagger  DO NOT EDIT.
package api

import (
	"context"
	"errors"
	"time"
)

type Renewal struct {
	Days    uint     `json:"days,omitempty"`
	Domains []string `json:"domains,omitempty"`
	Ips     []string `json:"ips,omitempty"`
	Units   []string `json:"units,omitempty"`
}

type Subject struct {
	Name    string   `json:"name,omitempty"`
	Issuer  uint     `json:"issuer,omitempty"`
	Days    uint     `json:"days,omitempty"`
	Ca      bool     `json:"ca,omitempty"`
	Domains []string `json:"domains,omitempty"`
	Ips     []string `json:"ips,omitempty"`
	Units   []string `json:"units,omitempty"`
}

type Certificate struct {
	Id        uint      `json:"id,omitempty"`
	Serial    string    `json:"serial,omitempty"`
	Issuer    uint      `json:"issuer,omitempty"`
	Ca        bool      `json:"ca,omitempty"`
	Name      string    `json:"name,omitempty"`
	Domains   []string  `json:"domains,omitempty"`
	Ips       []string  `json:"ips,omitempty"`
	CreatedAt time.Time `json:"created_at,omitempty"`
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	ExpireAt  time.Time `json:"expire_at,omitempty"`
	RevokedAt time.Time `json:"revoked_at,omitempty"`
	Units     []string  `json:"units,omitempty"`
}

type Batch struct {
	Certificate Subject `json:"certificate,omitempty"`
	Nested      []Batch `json:"nested,omitempty"`
}

type Status struct {
	Total      uint `json:"total,omitempty"`
	Expired    uint `json:"expired,omitempty"`
	SoonExpire uint `json:"soon_expire,omitempty"`
	Ca         uint `json:"ca,omitempty"`
	Revoked    uint `json:"revoked,omitempty"`
}

type API interface {
	// Get general status
	GetStatus(ctx context.Context) (Status, error)
	// List root certificates (without issuers). Equal to /certificates/0/issued
	ListRootCertificates(ctx context.Context) ([]Certificate, error)
	// Create root (issuer id 0) or child certificate.
	// Child certificate can be issued only if issuer referred to CA cert.
	// Root certificates always CA (ca flag ignored).
	CreateCertificate(ctx context.Context, subject Subject) (Certificate, error)
	// Create multiple certificates
	BatchCreateCertificate(ctx context.Context, batch []Batch) ([]Certificate, error)
	// List expired certificates
	ListExpiredCertificates(ctx context.Context) ([]Certificate, error)
	// List certificates wich will soon expire (within 30 days by default)
	ListSoonExpireCertificates(ctx context.Context) ([]Certificate, error)
	// Get issued certificate
	GetCertificate(ctx context.Context, certificateId uint) (Certificate, error)
	// Re-create certificate with same parameters but with different expiration.
	// In case of CA it will cause cascade renewal.
	RenewCertificate(ctx context.Context, certificateId uint, renewal Renewal) (Certificate, error)
	// Revoke issued certificate
	RevokeCertificate(ctx context.Context, certificateId uint) error
	// Get certificate public part
	GetPublicCert(ctx context.Context, certificateId uint) (string, error)
	// Get certificate private part
	GetPrivateKey(ctx context.Context, certificateId uint) (string, error)
	// Get issued child certificates.
	// Applicable only for CA certificates.
	// Special ID=0 means root certificates
	ListCertificates(ctx context.Context, certificateId uint) ([]Certificate, error)
	// List certificates revoked for the certificate. Make senses only for CA.
	ListRevokedCertificates(ctx context.Context, certificateId uint) ([]Certificate, error)
	// Get Certificate Revoked List. Make senses only for CA.
	GetRevokedCertificatesList(ctx context.Context, certificateId uint) (string, error)
}

const Prefix = "/api"

type Error struct {
	Status  int    `json:"-"`
	Message string `json:"error"`
}

func (err *Error) Error() string {
	return err.Message
}

func AsAPIError(err error) (*Error, bool) {
	var apiError *Error
	if errors.As(err, &apiError) {
		return apiError, true
	}
	return nil, false
}
